package com.mycompany.db.viewer;

import java.sql.SQLException;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;


public class MainFrame extends javax.swing.JFrame {

    private final Database db;
    private DefaultListModel<String> tableListModel;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        
        this.db = Database.getInstance();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SelectionbuttonGroup = new javax.swing.ButtonGroup();
        tableListScrollPane = new javax.swing.JScrollPane();
        tableList = new javax.swing.JList<>();
        fieldListScrollPane = new javax.swing.JScrollPane();
        fieldList = new javax.swing.JList<>();
        buttonPanel = new javax.swing.JPanel();
        simpleToggleButton = new javax.swing.JToggleButton();
        intervalToggleButton = new javax.swing.JToggleButton();
        multipleIntervalToggleButton = new javax.swing.JToggleButton();
        unselectAllTablesButton = new javax.swing.JButton();
        unselectAllFieldsButton = new javax.swing.JButton();
        showFieldsButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        connectionMenu = new javax.swing.JMenu();
        connectMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        disconnectMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Visualizador de base de datos");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        tableList.setBorder(javax.swing.BorderFactory.createTitledBorder("Tablas"));
        tableList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Conexión > Conectar para mostrar" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        tableListScrollPane.setViewportView(tableList);

        fieldList.setBorder(javax.swing.BorderFactory.createTitledBorder("Campos"));
        fieldList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Selecciona una tabla para mostrar" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        fieldListScrollPane.setViewportView(fieldList);

        buttonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipos de selección"));

        SelectionbuttonGroup.add(simpleToggleButton);
        simpleToggleButton.setText("Simple");
        simpleToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleToggleButtonActionPerformed(evt);
            }
        });

        SelectionbuttonGroup.add(intervalToggleButton);
        intervalToggleButton.setText("Intervalo");
        intervalToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intervalToggleButtonActionPerformed(evt);
            }
        });

        SelectionbuttonGroup.add(multipleIntervalToggleButton);
        multipleIntervalToggleButton.setSelected(true);
        multipleIntervalToggleButton.setText("Múltiples Intervalos");
        multipleIntervalToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multipleIntervalToggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(multipleIntervalToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(simpleToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(intervalToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(simpleToggleButton)
                .addGap(29, 29, 29)
                .addComponent(intervalToggleButton)
                .addGap(29, 29, 29)
                .addComponent(multipleIntervalToggleButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        unselectAllTablesButton.setText("Deseleccionar todo");
        unselectAllTablesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unselectAllTablesButtonActionPerformed(evt);
            }
        });

        unselectAllFieldsButton.setText("Deseleccionar todo");
        unselectAllFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unselectAllFieldsButtonActionPerformed(evt);
            }
        });

        showFieldsButton.setBackground(new java.awt.Color(102, 255, 102));
        showFieldsButton.setText("Mostrar Campos");
        showFieldsButton.setEnabled(false);
        showFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showFieldsButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Jonay Suárez Ramírez");

        jLabel2.setText("Samuel Trujillo Santana");

        connectionMenu.setText("Conexión");

        connectMenuItem.setText("Conectar");
        connectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectMenuItemActionPerformed(evt);
            }
        });
        connectionMenu.add(connectMenuItem);
        connectionMenu.add(jSeparator1);

        disconnectMenuItem.setText("Desconectar");
        disconnectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectMenuItemActionPerformed(evt);
            }
        });
        connectionMenu.add(disconnectMenuItem);

        menuBar.add(connectionMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tableListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unselectAllTablesButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(showFieldsButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addComponent(fieldListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(unselectAllFieldsButton)))
                .addGap(19, 19, 19))
            .addGroup(layout.createSequentialGroup()
                .addGap(160, 160, 160)
                .addComponent(jLabel1)
                .addGap(36, 36, 36)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tableListScrollPane)
                    .addComponent(fieldListScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addComponent(showFieldsButton)
                        .addGap(11, 11, 11)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unselectAllTablesButton)
                    .addComponent(unselectAllFieldsButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(7, 7, 7))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectMenuItemActionPerformed
        JPanel loginForm = new JPanel();
        loginForm.setLayout(new BoxLayout(loginForm, BoxLayout.Y_AXIS));
        
        loginForm.add(new JLabel("Usuario"));
        JTextField usernameTextField = new JTextField(5);
        loginForm.add(usernameTextField);
        
        loginForm.add(new JLabel("Contraseña"));
        JPasswordField passwordField = new JPasswordField(5);
        loginForm.add(passwordField);
        
        Object[] choices = {"Conectar", "Cancelar"};
        int res = JOptionPane.showOptionDialog(this, loginForm, "Conectar", 
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, 
                null, choices, null);
        
        if( res == JOptionPane.YES_OPTION ){
            try {
                //Borrar lo que hay antes de conectar
                resetAppState();
                
                String[] tables = this.db.connect(usernameTextField.getText(),
                        new String(passwordField.getPassword()));
                
                this.tableListModel = new DefaultListModel<String>();
                this.tableList.setModel(tableListModel);
                for (String table : tables) {
                    this.tableListModel.addElement(table);
                }
                this.showFieldsButton.setEnabled(true);
            } catch (SQLException ex) {
                //Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), 
                        "Error al conectar", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_connectMenuItemActionPerformed

    private void unselectAllTablesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unselectAllTablesButtonActionPerformed
        this.tableList.clearSelection();
    }//GEN-LAST:event_unselectAllTablesButtonActionPerformed

    private void unselectAllFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unselectAllFieldsButtonActionPerformed
        this.fieldList.clearSelection();
    }//GEN-LAST:event_unselectAllFieldsButtonActionPerformed

    private void showFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showFieldsButtonActionPerformed
        int[] selectedIndices = this.tableList.getSelectedIndices();
        
        DefaultListModel<String> fieldsListModel = new DefaultListModel<String>();
        for (int selectedIndex : selectedIndices) {
            String tableName = this.tableListModel.get(selectedIndex);
            
            String[] fields = this.db.getFields(tableName);
            for (String field : fields) {
                fieldsListModel.addElement(tableName + "." + field);
            }
        }
        this.fieldList.setModel(fieldsListModel);
    }//GEN-LAST:event_showFieldsButtonActionPerformed

    private void simpleToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpleToggleButtonActionPerformed
        this.tableList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }//GEN-LAST:event_simpleToggleButtonActionPerformed

    private void intervalToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intervalToggleButtonActionPerformed
        this.tableList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
    }//GEN-LAST:event_intervalToggleButtonActionPerformed

    private void multipleIntervalToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multipleIntervalToggleButtonActionPerformed
        this.tableList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    }//GEN-LAST:event_multipleIntervalToggleButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        this.db.disconnect();
    }//GEN-LAST:event_formWindowClosed

    private void disconnectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectMenuItemActionPerformed
        resetAppState();
    }//GEN-LAST:event_disconnectMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup SelectionbuttonGroup;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JMenuItem connectMenuItem;
    private javax.swing.JMenu connectionMenu;
    private javax.swing.JMenuItem disconnectMenuItem;
    private javax.swing.JList<String> fieldList;
    private javax.swing.JScrollPane fieldListScrollPane;
    private javax.swing.JToggleButton intervalToggleButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JToggleButton multipleIntervalToggleButton;
    private javax.swing.JButton showFieldsButton;
    private javax.swing.JToggleButton simpleToggleButton;
    private javax.swing.JList<String> tableList;
    private javax.swing.JScrollPane tableListScrollPane;
    private javax.swing.JButton unselectAllFieldsButton;
    private javax.swing.JButton unselectAllTablesButton;
    // End of variables declaration//GEN-END:variables

    private void resetAppState() {
        this.db.disconnect();
        
        this.tableListModel = null;
        DefaultListModel<String> defaultListModel = new DefaultListModel<String>();
        defaultListModel.addElement("Conexión > Conectar para mostrar");
        this.tableList.setModel(defaultListModel);
        
        DefaultListModel<String> defaultListModel2 = new DefaultListModel<String>();
        defaultListModel2.addElement("Selecciona una tabla para mostrar");
        this.fieldList.setModel(defaultListModel2);
        
        this.showFieldsButton.setEnabled(false);
    }
}
